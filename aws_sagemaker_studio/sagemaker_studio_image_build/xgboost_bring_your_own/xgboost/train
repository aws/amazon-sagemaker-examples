#!/usr/bin/env python3.6

# A sample training component that trains a simple scikit-learn decision tree model.
# This implementation works in File mode and makes no assumptions about the input file names.
# Input is specified as CSV with a data point in each row and the labels in the first column.

from __future__ import print_function

import json
import os
import pickle
import sys
import traceback

import pandas as pd
import xgboost as xgb

print("Libraries imported")

# These are the paths to where SageMaker mounts interesting things in your container.

prefix = '/opt/ml/'

input_path = prefix + 'input/data'
output_path = os.path.join(prefix, 'output')
model_path = os.path.join(prefix, 'model')
param_path = os.path.join(prefix, 'input/config/hyperparameters.json')

# This algorithm has a single channel of input data called 'training'. Since we run in
# File mode, the input files are copied to the directory specified here.
channel_name='training'
training_path = os.path.join(input_path, channel_name)

# The function to execute the training.
def train():
    print('Starting the training.')
    try:
        # Read in any hyperparameters that the user passed with the training job
        with open(param_path, 'r') as tc:
            trainingParams = json.load(tc)

        # Take the set of files and read them all into a single pandas dataframe
        input_files = [ os.path.join(training_path, file) for file in os.listdir(training_path) ]
        if len(input_files) == 0:
            raise ValueError(('There are no files in {}.\n' +
                              'This usually indicates that the channel ({}) was incorrectly specified,\n' +
                              'the data specification in S3 was incorrectly specified or the role specified\n' +
                              'does not have permission to access the data.').format(training_path, channel_name))
        raw_data = [pd.read_csv(file, header=None, engine='python') for file in input_files]
        train_data = pd.concat(raw_data)

        # labels are in the first column
        train_y = train_data.ix[:,0]
        train_X = train_data.ix[:,1:]

        # Here we only support a single hyperparameter. Note that hyperparameters are always passed in as
        # strings, so we need to do any necessary conversions. Here we specify a few hyperparameters. Refer to the open source
        # xgboost documentation for others. 
        
        max_depth = trainingParams.get('max_depth', None)
        if max_depth is not None:
            max_depth = int(max_depth)
        
        eta = trainingParams.get('eta', None)
        if eta is not None:
            eta = float(eta)
        
        gamma = trainingParams.get('gamma', None)
        if gamma is not None:
            gamma = int(gamma)
        
        min_child_weight = trainingParams.get('min_child_weight', None)
        if min_child_weight is not None:
            min_child_weight = int(min_child_weight)
            
        verbosity = trainingParams.get('verbosity', None)
        if verbosity is not None:
            verbosity = int(verbosity) 
        
        num_estimators = trainingParams.get('num_round', None)
        if num_estimators is not None:
            num_estimators = int(num_estimators)
            
        subsample = trainingParams.get('subsample', None)
        if subsample is not None:
            subsample = float(subsample)
                
        objective = trainingParams.get('objective', None)
        if objective is not None:
            objective = objective #this is already a string. 
        
        # Now use scikit-learn's decision tree classifier to train the model.
        clf = xgb.XGBClassifier(max_depth=max_depth, eta = eta, gamma = gamma, min_child_weight = min_child_weight,
                 verbosity = verbosity, num_estimators = num_estimators, subsample=subsample, objective=objective)
        clf = clf.fit(train_X.values, train_y)

        # save the model
        with open(os.path.join(model_path, 'xgboost.pkl'), 'wb') as out:
            pickle.dump(clf, out)
        print('Training complete.')
    except Exception as e:
        # Write out an error file. This will be returned as the failureReason in the
        # DescribeTrainingJob result.
        trc = traceback.format_exc()
        with open(os.path.join(output_path, 'failure'), 'w') as s:
            s.write('Exception during training: ' + str(e) + '\n' + trc)
        # Printing this causes the exception to be in the training job logs, as well.
        print('Exception during training: ' + str(e) + '\n' + trc, file=sys.stderr)
        # A non-zero exit code causes the training job to be marked as Failed.
        sys.exit(255)

if __name__ == '__main__':
    train()

    # A zero exit code causes the job to be marked a Succeeded.
    sys.exit(0)

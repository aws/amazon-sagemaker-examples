{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation template for Build Custom Container with SageMaker workshop. Creates an EC2 instance and test Lambda function.",

  "Parameters" : {
	"01C9InstanceType" : {
      "Description" : "Cloud9 instance type",
      "Type" : "String",
      "Default" : "m4.xlarge",
      "AllowedValues" : [ "m4.large", "m4.xlarge", "t2.large" ],
      "ConstraintDescription" : "Must be a valid Cloud9 instance type"
    },
	"02BucketName" :{
      "Type": "String",
      "Description": " The name for the bucket where you'll upload model and test images.",
      "AllowedPattern": "^([a-z]|(\\d(?!\\d{0,2}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})))([a-z\\d]|(\\.(?!(\\.|-)))|(-(?!\\.))){1,61}[a-z\\d\\.]$",
      "Default": "gpstec417-builder-session",
      "ConstraintDescription" : "Should be a Valid S3 Bucket Name"
    }
  },

  "Mappings" : {
    "AWSRegion2AMI" : {
        "us-east-1"      : { "AMI" : "ami-0ee43063d08ad19d2" },
        "us-west-2"      : { "AMI" : "ami-019f1da417e0ce397" }
    }
  },

  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterLabels" : {
        "01InstanceType" : { "default" : "Provision an EC2 Instance to create Docker image, with the following instance type" }
      }
    }
  },

  "Resources" : {

    "C9Instance": {
      "Description": "-",
      "Type": "AWS::Cloud9::EnvironmentEC2",
      "Properties": {
        "Description": "AWS Cloud9 instance for builder session GPSTEC417",
        "AutomaticStopTimeMinutes": 120,
        "InstanceType": { "Ref" : "01C9InstanceType" },
        "Name": { "Ref": "AWS::StackName" }
      }
    },
	
    "BuilderSessionS3" : {
      "Type" : "AWS::S3::Bucket",
	  "Properties" : {
		"BucketName" : {"Fn::Join": ["-", [{"Ref": "02BucketName"},  { "Ref" : "AWS::Region" }, {"Ref": "AWS::AccountId"}]]}
	  },
	  "DeletionPolicy" : "Retain"
    },

	"LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {	
	  	"RoleName": "GPSTEC417-LambdaExecutionRole",
        "AssumeRolePolicyDocument": {
			"Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
						"Service": [
							"lambda.amazonaws.com"
                        ]
					},
                    "Action": [
                      "sts:AssumeRole"
                    ]
                }                       
            ]
		},
	    "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonSageMakerFullAccess"
        ],
        "Path": "/"
	  }
	},
	
	"CallSageMakerEndpointLambdaFunction": {
	  "Type" : "AWS::Lambda::Function",
	  "DependsOn": [
        "LambdaExecutionRole"
      ],
	  "Properties" : {
		  "FunctionName" : "Call_SageMaker_Endpoint_Image_Classification",
		  "Handler" : "index.lambda_handler",
          "Role": {
			  "Fn::GetAtt": [
				"LambdaExecutionRole",
				"Arn"
			  ]
          },
		  "Environment" : {
			  "Variables" : { "BUCKET_NAME" : "", 
			                  "SAGEMAKER_ENDPOINT_NAME" : "" }
		  },
          "Runtime": "python3.6",
          "MemorySize" : 128,
          "Timeout": "30",
		  "Code" : {
			"ZipFile": {
				"Fn::Join": [
					"\n",[
					"import os",
					"import boto3",
					"import json",
					"",
					"# grab environment variables",
					"SAGEMAKER_ENDPOINT_NAME = os.environ['SAGEMAKER_ENDPOINT_NAME']",
					"BUCKET_NAME = os.environ['BUCKET_NAME']",
					"runtime= boto3.client('runtime.sagemaker')",
					"s3 = boto3.resource('s3')",
					"",
					"def lambda_handler(event, context):",
					"    OBJECT_KEY = event['glass bottle image'] ",
					"    file_name = '/tmp/test_image.jpg'",
					"    s3.Bucket(BUCKET_NAME).download_file(OBJECT_KEY, file_name)",
					"",
					"    payload = ''",
					"",
					"    with open(file_name, 'rb') as f:",
					"        payload = f.read()",
					"        payload = bytearray(payload)",
					"",
					"    response = runtime.invoke_endpoint(EndpointName=SAGEMAKER_ENDPOINT_NAME,",
					"                                       ContentType='application/x-image',",
					"                                       Body=payload)",
					"",
					"    result = json.loads(response['Body'].read().decode())",
					"    print(result)",
					"    pred = result['predictions']['class']",
					"",
					"    return pred "
				  ]
				]
			}
		  }
		}
	}
  }
}

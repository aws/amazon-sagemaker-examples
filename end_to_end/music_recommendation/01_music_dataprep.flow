{"metadata": {"version": 1, "disable_limits": false}, "nodes": [{"node_id": "5c9d4f98-dd8a-4b74-89ad-735638aa7fe6", "type": "SOURCE", "operator": "sagemaker.s3_source_0.1", "parameters": {"dataset_definition": {"__typename": "S3CreateDatasetDefinitionOutput", "datasetSourceType": "S3", "name": "tracks.csv", "description": null, "s3ExecutionContext": {"__typename": "S3ExecutionContext", "s3Uri": "s3://sagemaker-us-east-2-xxxxxx/music-recommendation/tracks.csv", "s3ContentType": "csv", "s3HasHeader": true}}}, "inputs": [], "outputs": [{"name": "default", "sampling": {"sampling_method": "sample_by_limit", "limit_rows": 50000}}]}, {"node_id": "d6154703-6fe5-4501-bf0a-568d2ef32974", "type": "TRANSFORM", "operator": "sagemaker.spark.infer_and_cast_type_0.1", "parameters": {}, "trained_parameters": {"schema": {"trackId": "string", "length": "float", "energy": "float", "acousticness": "float", "valence": "float", "speechiness": "float", "instrumentalness": "float", "liveness": "float", "tempo": "float", "genre": "string"}}, "inputs": [{"name": "default", "node_id": "5c9d4f98-dd8a-4b74-89ad-735638aa7fe6", "output_name": "default"}], "outputs": [{"name": "default"}]}, {"node_id": "44bd21fc-7685-4a3c-acfe-42740edd99cb", "type": "TRANSFORM", "operator": "sagemaker.spark.encode_categorical_0.1", "parameters": {"operator": "One-hot encode", "one_hot_encode_parameters": {"invalid_handling_strategy": "Keep", "drop_last": false, "output_style": "Columns", "input_column": "genre"}, "ordinal_encode_parameters": {"invalid_handling_strategy": "Replace with NaN"}}, "trained_parameters": {"one_hot_encode_parameters": {"_hash": -1767228197713558300, "string_indexer_model": "P)h>@6aWAK2mr#H-BPFL`-k5E003hF000vJ003=ebYWy+bYU-WVRCdWFfcGMFny29PQx$|MfZG$*Qw=}G-|qqO&3)wf!IbvJV~wk#n?uaD*w(9BqWevXC2>rX67n-3n_`M2sBEF(4SDI2y~Xt$^ju4Liv!%_;Keoz9H>{Mk^|jjl-0|MX_BrtGaF1O0An!TZy^<gp^G1Y`&FBss*@rzfjyOMl<}O?CNH-e6H1|ZideY_rdLf%~x>(uPyHUE7-YsMvNRWK9+nJERzvEA)`?8H_PZ^*Yk6#gvJ4i&BuSFNEC<_Y2NBU8tL&8k$(olmx8{(++*s04f*?quKUV~X}b9UP)h>@6aWAK2mr#H-BJ$B-DM5{000aC000;O003=ebYWy+bYU+paA9(EEif=JFfcA-a$`#_N@ieSU}9+h{d_q9P)h>@6aWAK2mr&I-BKPFeOA^1007DY002k;003lRbYU-WVRCdWFfcGMFfBD?GhsI|G&U_XG&V9VG%_?aEnzcaH7z(eW->BlIbk_vIW#R}FfcGKb8ca9aCt6pVRCVGWps^F(Q4Z;6qVK330)pGh=L7%2!@mvJTIP8F9~~T$HpjQgs_Lf7)7?_)I^qDNp49?{$XFRhdq`3$bMlD`<Tf|x^*3cy~y{TbFQw=!PBFej{y3iq3@cDI;u2~VTWLUXU2|A{g_rn007vHu1@{t>n?z*=;#e~zAEUVslG3Yib=k#6>qT2m}a{t`08p$_39EsYd$3NIVSp}Pq=I;a9Wh7vm##Xs`@1*vE&8I;(C0&4nd2)Zi^E0#i@wTNRAN%htPaLaYU#%;v6p#L<Tr)m<^f<xuKhclAJJkpF-{aZ?X?S7h1Mu@3m~yw)()Z-rv1<J#;Jnqd~CS>3)IT&v38x{9Znmt#SjXPNtSXV7aDQ@VSRetPFT-FWv>=A}g4w2j0LN0Q2B4g*d04D$Xk+JziXTIgvQQ5}V(&Yez0i;!GSNc@;~?b<&K`L^zWV*AByZP2KUK_>KP89NxlPJMaF3t#@T?uHd*}5@$@jttfRS>IG!=50I$_N0e*;*SWQzcCA()SHL{k8ho7d-Zqh*@A(7I@9jrbMw8wk9Vh89NJyGSqfweXOGjZCCSeec{n7Ag5Dd~`7$xHa%eGbGPgLwv^%wsHP)h>@6aWAK2mr&I-BQQ!#hMZT000mG002z@003lRbYU+paA9(EEif=JFfc7OWHVtmF*G(UG&D9cEi^JTG%aB>Vl^!|IA$_3WI16uWjQo0V=yo<E^}^SaBz7paA9(Bb!BueV{&6lE=p!#U|?dXQi*Rr@3|)*08mQ-0u%!j000080K%KyQm5zphu;7I0Am3F022TJ00000000000HlEc0001OWprU=VRT_HaA9(EEif=JFfdR{0Rj{Q6aWAK2mr#H-BJ$B-DM5{000aC000;O0000000000005+c5CH%HZDn*}WMOn+FD`Ila&#>)FfcGME@N_IP)h*<6ay3h000O8!<*ew9u|F8)&T$j$^rlYNB{r;0000000000q=8fc003lRbYU-WVRCdWFfcGMFfBD?GhsI|G&U_XG&V9VG%_?aEnzcaH7z(eW->BlIbk_vIW#R}FfcGKb8ca9aCt6pVRCVGWpq$W0Rj{Q6aWAK2mr&I-BQQ!#hMZT000mG002z@0000000000005+ckOKe!WMOn+FD`Ila&#>)FfcGMEj45_VK*@}HZ3$XHZm<VGBh+TVKZViEjT!4GBRX2VL4?vG%aH=FfcB2Zeeh6c`k5aa&dKKbS`6ZV^B*41^@s600aO80C)ia01X5H0000", "one_hot_encoder_model": "P)h>@6aWAK2mr&I-BQq6*~ioX003zL000vJ003=ebYWy+bYU-WVRCdWFfcGMFm;YSPXjRwhIf93=WCRs?NxUxLTV){m{=oo@wF%NCC6c)>VGE`fdrz9hu40e$0rya<_rTwJ}68$9!ced{HnZD6QL9)^%!Uy<vxtj67TD9(16UIvY<~ewB7Bh@7G#)UAt=F(tjq-a}1TdR9fi;`uDKVwO3|a!(T|VnR<NDYudESzMj-R`aM?i2`tC-fLUOe&}C{M7D+|!qN@}m<dYerGoR!+{4BonnjSG&N4xNb?qVk9$Z&4J(uBpy)4wv|^2c@kV`IMVuFK9hA5cpJ1QY-O00;oXo83~^G74G_0000C0000O0001OWprU=VRT_HE^uLTbS*G2FfcGKV{&6lE=p!#U|?c6elzL<08mQ<1QY-O00;oXo840OsOa2+0RR9n0ssI=0001FVRT_HaA9(EEif=JFfc7QWoBeFH)S?0GGsC|Ei^VZWG!JbHDWC_IW#miIXPovGi72eV=yo<E^}^SaBz7paA9(Bb!BvYQeA7?Fcej^EG?{k=!1+5eh7kw6kK7?iR*+uv~OjMQP#edQj}Qg%w#)}l#MhE>}T``_J{Q5qh)0<2`=~JoO{m|x;+0L6GRy4gam`rBCUWnKOuxR)<fODA~*+U80-hQU@=-{3HHBU?AeJhKkw}Lhb#rbsE_IXSU7oKoB37oAT6|Sp?;G#bzvO<2tGt~M`~Hh${`Q?fgf~s188=LT7LGPye7SZ3HGq}=>2JQc2EDK)em4F7_+K8dKmd3rM0=|Vj@5!U+d++q_IU^(T@p_c!cQDKL|V39GvM)I&SLUyp&Gl!U_7+STHxANH%2Fnc3K}kf}oI+_K@#f>okimENrZhz;Y7DU1<wNN-oW-eijkNYX%lTvtvMmHjr;nhllERxU$UK_o^RpfFg5>{SyqUM_E!h<@2BJ}ymryJ9=$am3?xcQh+>-j38DSG^>cN{zBi<tHjj(=<<$bP#8~&q)%gUOLJLM}82%3qCgxx`e;-0#Hi>1QY-O00;oXo840IUmJT80000G0000@0001FVRT_HE^uLTbS*G2FfcGJH)UpIG&f~7Eiz;>G%YkXHe@YfGBsi?H90giH90wBV>4x9En_e+FfMa$VQ_GHE^uLTadl;ME@N_IOD;-gU|?WkxaGgQ{M<h)GXPLa0Rj{Q6aWAK2mr&I-BQq6*~ioX003zL000vJ0000000000005+c00000ZDn*}WMOn+FK}UUbS*G2FfcGsO928D0~7!N00;oXo83~^G74G_0000C0000O00000000000001_fdv5o0BvP-VPs)+VJ|LlVRCdWFfcGMFfL<qV^B*00u%!j000080K=QzQue6m+=2lB05Ado07w7;00000000000HlFQ0RRAGVRT_HaA9(EEif=JFfc7QWoBeFH)S?0GGsC|Ei^VZWG!JbHDWC_IW#miIXPovGi72eV=yo<E^}^SaBz7paA9(Bb!Bu=O928D0~7!N00;oXo840IUmJT80000G0000@00000000000001_fiVLB0AyiwVJ|LlVRCdWFfcGMFfBJ_W@I!sWi~A`WHK}@G&VM5EnzY>Vl6c}G&D6iIb&lpWnwL3FfcGKb8ca9aCt6pVRCVGWpplMa$`_S1qJ{B000C41ORve006E700000"}}, "inputs": [{"name": "df", "node_id": "d6154703-6fe5-4501-bf0a-568d2ef32974", "output_name": "default"}], "outputs": [{"name": "default"}]}, {"node_id": "9a4e227d-222b-4067-a81a-605faf001547", "type": "TRANSFORM", "operator": "sagemaker.spark.custom_pyspark_0.1", "parameters": {"code": "# Table is available as variable `df`\nfrom pyspark.sql import functions as F\ndf = df.withColumn('EventTime', F.unix_timestamp(F.current_timestamp()))"}, "inputs": [{"name": "df", "node_id": "44bd21fc-7685-4a3c-acfe-42740edd99cb", "output_name": "default"}], "outputs": [{"name": "default"}]}, {"node_id": "d65f643a-9fb9-4b66-bf0d-2b32ce881dc5", "type": "TRANSFORM", "operator": "sagemaker.spark.cast_single_data_type_0.1", "parameters": {"column": "EventTime", "original_data_type": "Long", "data_type": "float"}, "inputs": [{"name": "df", "node_id": "9a4e227d-222b-4067-a81a-605faf001547", "output_name": "default"}], "outputs": [{"name": "default"}]}, {"node_id": "19ad8e80-2002-4ee9-9753-fe9a384b1166", "type": "TRANSFORM", "operator": "sagemaker.spark.custom_formula_0.1", "parameters": {"output_column": "danceability", "formula": "0.3*valence + 0.1*liveness + 0.1*energy"}, "inputs": [{"name": "df", "node_id": "d65f643a-9fb9-4b66-bf0d-2b32ce881dc5", "output_name": "default"}], "outputs": [{"name": "default"}]}, {"node_id": "814830ce-ab4d-4193-90bb-8b95fb375da0", "type": "SOURCE", "operator": "sagemaker.s3_source_0.1", "parameters": {"dataset_definition": {"__typename": "S3CreateDatasetDefinitionOutput", "datasetSourceType": "S3", "name": "ratings.csv", "description": null, "s3ExecutionContext": {"__typename": "S3ExecutionContext", "s3Uri": "s3://sagemaker-us-east-2-xxxxxx/music-recommendation/ratings.csv", "s3ContentType": "csv", "s3HasHeader": true}}}, "inputs": [], "outputs": [{"name": "default", "sampling": {"sampling_method": "sample_by_limit", "limit_rows": 50000}}]}, {"node_id": "9c0d5850-2331-4f2c-b099-f6e0f8d42848", "type": "TRANSFORM", "operator": "sagemaker.spark.infer_and_cast_type_0.1", "parameters": {}, "trained_parameters": {"schema": {"ratingEventId": "string", "ts": "long", "userId": "long", "trackId": "string", "sessionId": "long", "itemInSession": "long", "Rating": "float"}}, "inputs": [{"name": "default", "node_id": "814830ce-ab4d-4193-90bb-8b95fb375da0", "output_name": "default"}], "outputs": [{"name": "default"}]}, {"node_id": "a88a70f8-2933-4cef-ba8f-8617ae2d1748", "type": "TRANSFORM", "operator": "sagemaker.spark.custom_pyspark_0.1", "parameters": {"code": "# Table is available as variable `df`\nfrom pyspark.sql import functions as F\ndf = df.withColumn('EventTime', F.unix_timestamp(F.current_timestamp()))"}, "inputs": [{"name": "df", "node_id": "9c0d5850-2331-4f2c-b099-f6e0f8d42848", "output_name": "default"}], "outputs": [{"name": "default"}]}, {"node_id": "9a283380-91ca-478e-be99-6ba3bf57c680", "type": "TRANSFORM", "operator": "sagemaker.spark.cast_single_data_type_0.1", "parameters": {"column": "EventTime", "original_data_type": "Long", "data_type": "float"}, "inputs": [{"name": "df", "node_id": "a88a70f8-2933-4cef-ba8f-8617ae2d1748", "output_name": "default"}], "outputs": [{"name": "default"}]}, {"node_id": "d90b4efc-1a47-4971-85f9-c65aedbff3a2", "type": "TRANSFORM", "operator": "sagemaker.spark.join_tables_0.1", "parameters": {"left_column": "trackId", "right_column": "trackId", "join_type": "inner"}, "inputs": [{"name": "df", "node_id": "19ad8e80-2002-4ee9-9753-fe9a384b1166", "output_name": "default"}, {"name": "df", "node_id": "9a283380-91ca-478e-be99-6ba3bf57c680", "output_name": "default"}], "outputs": [{"name": "default"}]}, {"node_id": "fe586afa-70ed-4f81-b1a7-2635dacd48c4", "type": "TRANSFORM", "operator": "sagemaker.spark.manage_columns_0.1", "parameters": {"operator": "Drop column", "drop_column_parameters": {"column_to_drop": "trackId_1"}}, "inputs": [{"name": "df", "node_id": "d90b4efc-1a47-4971-85f9-c65aedbff3a2", "output_name": "default"}], "outputs": [{"name": "default"}]}, {"node_id": "16e87932-15a9-4c7f-b880-c7a767df5b40", "type": "TRANSFORM", "operator": "sagemaker.spark.manage_columns_0.1", "parameters": {"operator": "Rename column", "rename_column_parameters": {"input_column": "trackId_0", "new_name": "trackId"}, "drop_column_parameters": {}}, "inputs": [{"name": "df", "node_id": "fe586afa-70ed-4f81-b1a7-2635dacd48c4", "output_name": "default"}], "outputs": [{"name": "default"}]}, {"node_id": "f35a528b-19a2-4fcd-911e-03a146ebac09", "type": "TRANSFORM", "operator": "sagemaker.spark.custom_pyspark_0.1", "parameters": {"code": "# Table is available as variable `df`\nimport pyspark.sql.functions as F\n# numeric features\nnum_feat_cols = ['energy', 'acousticness', 'valence', 'speechiness', 'instrumentalness', 'liveness', 'tempo', 'danceability', 'genre_Latin', 'genre_Folk',  'genre_Blues', 'genre_Rap', 'genre_Reggae', 'genre_Jazz', 'genre_RnB', 'genre_Country', 'genre_Electronic', 'genre_Pop_Rock']\n# calculate averages for 5-star ratings\nagg_obj = [F.avg(feat_col).alias(feat_col+\"_5star\") for feat_col in num_feat_cols]\ndf = df.filter(F.col('Rating')==5).groupBy('userId').agg(*agg_obj)\ndf = df.withColumn('EventTime', F.unix_timestamp(F.current_timestamp()))"}, "inputs": [{"name": "df", "node_id": "16e87932-15a9-4c7f-b880-c7a767df5b40", "output_name": "default"}], "outputs": [{"name": "default"}]}, {"node_id": "7a6dad19-2c80-43e3-b03d-ec23c3842ae9", "type": "TRANSFORM", "operator": "sagemaker.spark.cast_single_data_type_0.1", "parameters": {"column": "EventTime", "original_data_type": "Long", "data_type": "float"}, "inputs": [{"name": "df", "node_id": "f35a528b-19a2-4fcd-911e-03a146ebac09", "output_name": "default"}], "outputs": [{"name": "default"}]}]}